"""
patch_applier.py

Apply patches generated by patch_generator.py, variable_reset.py and call_chain.py
to the original source code. Supports previewing changes and writing updated files.
"""

from typing import List, Dict
from patch.patch_generator import Patch
from patch.variable_reset import ResetPatch
from patch.call_chain import CallChainPatch

class PatchApplier:
    """
    Apply patches to source code files. The applier can generate unified diffs or
    directly modify the source lines in memory and save new files.
    """

    def __init__(self):
        pass

    def apply_patches(self, source_map: Dict[str, List[str]],
                      patches: List[Patch],
                      reset_patches: List[ResetPatch],
                      chain_patches: List[CallChainPatch]) -> Dict[str, List[str]]:
        """
        Apply all types of patches to the source code.

        :param source_map: Mapping file path -> list of lines.
        :param patches: List of initial patches (if checks).
        :param reset_patches: List of variable reset patches.
        :param chain_patches: List of call chain patches.
        :return: Updated source_map with modifications applied.
        """
        # Group patches by file and line
        modifications: Dict[str, Dict[int, List[str]]] = {}
        for p in patches:
            modifications.setdefault(p.file_path, {}).setdefault(p.line_number, []).extend(p.new_lines)
        for rp in reset_patches:
            modifications.setdefault(rp.file_path, {}).setdefault(rp.line_number, []).extend(rp.reset_lines)
        for cp in chain_patches:
            modifications.setdefault(cp.file_path, {}).setdefault(cp.line_number, []).extend(cp.new_lines)

        # Apply modifications
        updated_sources: Dict[str, List[str]] = {}
        for file_path, lines in source_map.items():
            new_lines = []
            file_mods = modifications.get(file_path, {})
            for idx, line in enumerate(lines, start=1):
                if idx in file_mods:
                    # Insert new lines before the original line
                    new_lines.extend(file_mods[idx])
                new_lines.append(line)
            updated_sources[file_path] = new_lines
        return updated_sources

    def generate_diff(self, original: List[str], modified: List[str]) -> str:
        """
        Generate a unified diff between original and modified source lines.

        :param original: Original source lines.
        :param modified: Modified source lines.
        :return: Diff string.
        """
        import difflib
        diff = difflib.unified_diff(original, modified, lineterm='')
        return '\\n'.join(diff)

    def preview_modifications(self, source_map: Dict[str, List[str]],
                              modifications: Dict[str, Dict[int, List[str]]]) -> None:
        """
        Print a preview of modifications without applying them. Useful for debugging.

        :param source_map: Mapping file path -> list of lines.
        :param modifications: Mapping file path -> line -> list of new lines.
        """
        for file_path, mods in modifications.items():
            print(f"Modifications for {file_path}:")
            for line, new_lines in sorted(mods.items()):
                print(f"  Before line {line}:")
                for l in new_lines:
                    print(f"    {l}")
